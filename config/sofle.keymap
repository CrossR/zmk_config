#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "common.h"

// Shift on Hold / Parenthesis on Tap
#define SPCCDT_L &mt LSFT LPAR
#define SPCCDT_R &mt RSFT RPAR

// Layer on Hold / Key on Tap
#define DEL_L1  &lt 1 DEL
#define RET_L2  &lt 2 RET
#define A_L1    &lt 1 A
#define SCLN_L2 &lt 2 SCLN
#define RET_L4  &lt 4 RET

// Short numpad keys
#define KP_1 &kp KP_N1
#define KP_2 &kp KP_N2
#define KP_3 &kp KP_N3
#define KP_4 &kp KP_N4
#define KP_5 &kp KP_N5
#define KP_6 &kp KP_N6
#define KP_7 &kp KP_N7
#define KP_8 &kp KP_N8
#define KP_9 &kp KP_N9
#define KP_0 &kp KP_N0

// Media Keys
#define PREVI &cp M_PREV
#define PLAY  &cp M_PLAY
#define NEXT  &cp M_NEXT

// Game keys
// Random-ish unused buttons for binding
#define GAME_1 LS(LC(LA(N1)))
#define GAME_2 LS(LC(LA(N2)))
#define GAME_3 LS(LC(LA(N3)))

// TODO: Encoder push missing.
// TODO: Mouse HID for wheel events.

// Set encoder resolutions
&left_encoder {
    resolution = <2>;
};

&right_encoder {
    resolution = <2>;
};

/ {

    macros {
        #include "macros.dtsi"
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1   |  2  |  3   |  4   |   5    |                  |    6   |  7 |  8  |  9  |   0  |   L³  |
// |  TAB  |  Q   |  W  |  E   |  R   |   T    |                  |    Y   |  U |  I  |  O  |   P  |   \   |
// | ⌃     | A/L¹ |  S  |  D   |  F   |   G    |                  |    H   |  J |  K  |  L  | ;/L² |   '   |
// | ( / ⇧ |  Z   |  X  |  C   |  V   |   B    |       |  | MUTE  |    N   |  M |  ,  |  .  |   /  | ) / ⇧ |
//                | ALT | GUI  |  [   | DEL/L¹ | SPACE |  | BKSPC | RET/L² |  ] | ALT | GUI |
            bindings = <
&kp ESC  &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5                  &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 &to_game
&kp TAB  &kp Q     &kp W     &kp E     &kp R     &kp T                      &kp Y     &kp U     &kp I     &kp O     &kp P     &kp 0x64
&kp LCTL A_L1      &kp S     &kp D     &kp F     &kp G                      &kp H     &kp J     &kp K     &kp L     SCLN_L2   &kp QUOT
SPCCDT_L &kp Z     &kp X     &kp C     &kp V     &kp B  XXXXX    &cp M_MUTE &kp N     &kp M     &kp CMMA  &kp DOT   &kp FSLH  SPCCDT_R
                   &kp LALT  &kp LGUI  &kp LBKT  DEL_L1 &kp SPC  &kp BKSP   RET_L2    &kp RBKT  &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp PGDN PGUP &inc_dec_cp M_VOLU M_VOLD>;
        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// |       |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |  0    |  F12  |
// |       |-----|  !  |  %   |  =   |  +   |                   |  -   |  _    |  ^    |      |       |       |
// |       |     |     |      |      |  ~   |        |  |       |  $   |  &    |  _    |      |       |       |
//               |     |      |      |------|        |  |       |      |       |       |      |
            bindings = <
______ &kp F1    &kp F2    &kp F3    &kp F4    &kp F5                   &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &kp F11
______ &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5                &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 &kp F12
______ ______    &kp EXCL  &kp PRCNT &kp EQL   &kp PLUS                 &kp MINUS &kp UNDER &kp CARET ______    ______    ______
______ ______    ______    ______    ______    ______   ______   ______ &kp DLLR  &kp ASTRK &kp AMPS  ______    ______    ______
                 ______    ______    ______    ______   ______   ______ ______    ______    ______    ______
            >;

            sensor-bindings = <&inc_dec_kp PGDN PGUP &inc_dec_cp M_VOLU M_VOLD>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// | CLR | BT1  | BT2  | BT3   | BT4   | BT5  |                |      |      |       |      |       | TOGG  |
// |     |      |  ^   |       |       |      |                |      |      |       |      |       |       |
// |     |  <   |  V   |  >    |   [   |      |                |  #   |  ]   |       |      |-------|       |
// |     | PREV | PLAY | NEXT  |       |      |      |  |      |      |  ~   |       |      |       |       |
//              |      |       |       |  `   |      |  |      |------|      |       |      |
            bindings = <
BTCLR  PC_BT    MAC_BT   PHONE_BT TAB_BT   BT5                      ______   ______     ______  ______ ______ &toggle_bt_usb
______ ______   &kp UARW ______   ______   ______                   ______   ______     ______  ______ ______ &to_usb
______ &kp LARW &kp DARW &kp RARW &kp LBKT ______                   &kp 0x32 &kp RBKT   ______  ______ ______ ______
______ PREVI    PLAY     NEXT     ______   ______   ______  ______  ______   &kp TILDE2 ______  ______ ______ &to_bt
                ______   ______   ______   &kp GRAV ______  ______  ______   ______     ______  ______
            >;

            sensor-bindings = <&inc_dec_kp PGDN PGUP &inc_dec_cp M_VOLU M_VOLD>;
        };

        gaming_layer {
// ------------------------------------------------------------------------------------------------------------
// | ESC |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   L⁰  |
// | TAB |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   \   |
// | ⌃   |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | ⇧   |  Z  |  X  |  C   |  V   |  B   |  Key3  |  |       |  N   |  M    |  ,    |  .   |   /   |   ⇧   |
//             | ALT |  RET |  M   |  ALT |  SPACE |  | BKSPC | RET  |  ]    | ALT   | GUI  |
            bindings = <
&kp ESC  &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5                    &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 &from_game
&kp TAB  &kp Q     &kp W     &kp E     &kp R     &kp T                        &kp Y     &kp U     &kp I     &kp O     &kp P     &kp 0x64
&kp LCTL &kp A     &kp S     &kp D     &kp F     &kp G                        &kp H     &kp J     &kp K     &kp L     &kp SCLN  &kp QUOT
&kp LSFT &kp Z     &kp X     &kp C     &kp V     &kp B    &kp GAME_1 XXXXX    &kp N     &kp M     &kp CMMA  &kp DOT   &kp FSLH  SPCCDT_R
                   &kp LALT  &kp RET   &kp M     &kp LALT &kp SPC    &kp BKSP RET_L4    &kp RBKT  &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp GAME_2 GAME_3 &inc_dec_cp M_VOLU M_VOLD>;
        };

        gaming_alt_layer {
// ------------------------------------------------------------------------------------------------------------
// |     |  F1 | F2  |  F3  |  F4  |  F5  |                   |  F6  |   F7  |   F8  |  F9  |  F10  |  F11  |
// |     |     |     |      |      |      |                   |      |  KP1  |  KP2  | KP3  |       |  F12  |
// |     |     |     |      |      |      |                   |      |  KP4  |  KP5  | KP6  |       |       |
// |     |     |     |      |      |      |        |  |       |      |  KP7  |  KP8  | KP9  |       |       |
//             |     |      |      |      |        |  |       |------|       |       | KP0  |
            bindings = <
______ &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
______ ______ ______ ______ ______ ______                 ______ KP_1   KP_2   KP_3   ______  &kp F12
______ ______ ______ ______ ______ ______                 ______ KP_4   KP_5   KP_6   ______  ______
______ ______ ______ ______ ______ ______ ______  ______  ______ KP_7   KP_8   KP_9   ______  ______
              ______ ______ ______ ______ ______  ______  ______ ______ ______ KP_0  
            >;

            sensor-bindings = <&inc_dec_kp GAME_2 GAME_3 &inc_dec_cp M_VOLU M_VOLD>;
        };
    };
};
